unit TarefasFuncoes;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, REST.Client, REST.Types, System.JSON,
  IPPeerClient, Data.Bind.Components, Data.Bind.ObjectScope, Vcl.ComCtrls,
  Vcl.Grids,System.Net.HttpClient;

type
  TTarefasFuncoes = class
  private
    FRESTClient: TRESTClient;
    FRESTRequest: TRESTRequest;
    FRESTResponse: TRESTResponse;
    FBaseURL: string;
    function GetBaseURL: string;
    procedure SetBaseURL(const Value: string);
  public
    constructor Create;
    destructor Destroy; override;
    function UpdateStatus(TaskID: string; NewStatus: string): boolean;
    function  RemoverTarefa(pTaskID: string): boolean;
    function GetTotalTarefas(): integer;
    function  ListarTarefas():TJSONArray;
    function GetPriorityTarefas(): integer;
    function AddTarefa(pTitulo: string; pDescricao: string): boolean;
    function GetCompletotarefasUtimos7Dias(): string;
    property BaseURL: string read GetBaseURL write SetBaseURL;
  end;

implementation

{ TTaskUpdater }

constructor TTarefasFuncoes.Create;
begin
  inherited Create;
  FRESTClient := TRESTClient.Create(nil);
  FRESTRequest := TRESTRequest.Create(nil);
  FRESTResponse := TRESTResponse.Create(nil);

  FRESTClient.ContentType := 'application/json';
  FRESTClient.BaseURL := 'http://localhost:9000'; // Altere para o endereço do seu servidor Horse
  FRESTClient.Accept := 'application/json';
  FRESTClient.ContentType := 'application/json';

  FRESTRequest.Client := FRESTClient;
  FRESTRequest.Response := FRESTResponse;
  FRESTRequest.Accept := 'application/json';

end;

destructor TTarefasFuncoes.Destroy;
begin
  FRESTRequest.Free;
  FRESTResponse.Free;
  FRESTClient.Free;
  inherited;
end;

function TTarefasFuncoes.GetBaseURL: string;
begin
  Result := FBaseURL;
end;

procedure TTarefasFuncoes.SetBaseURL(const Value: string);
begin
  FBaseURL := Value;
  FRESTClient.BaseURL := FBaseURL;
end;

function TTarefasFuncoes.AddTarefa(pTitulo: string; pDescricao: string): boolean;
var
  TaskData: TJSONObject;
begin
  // Criação de um objeto JSON com os dados da tarefa
  pTitulo :=  Trim(StringReplace(pTitulo, #13#10, '\n', [rfReplaceAll]));

  TaskData := TJSONObject.Create;
  try
    TaskData.AddPair('Title', pTitulo);
    TaskData.AddPair('Description', pDescricao);
    TaskData.AddPair('Status', 'Pendente');
    TaskData.AddPair('Priority', TJSONNumber.Create(1)); // Prioridade da tarefa

    FRESTRequest.ClearBody;
    FRESTRequest.Method := rmPOST;
    FRESTRequest.Resource := '/tasks';
    FRESTRequest.AddBody(TaskData.ToString, ctAPPLICATION_JSON);

    // Envio da requisição
    FRESTRequest.Execute;

    // Verificação da resposta
    if FRESTResponse.StatusCode = 200 then
    begin
      Result := True;
      ShowMessage('Tarefa adicionada com sucesso!')
    end
    else
      ShowMessage('Erro ao adicionar tarefa: ' + FRESTResponse.Content);

    // Liberação de recursos
  finally
    TaskData.Free;
  end;

end;

function TTarefasFuncoes.ListarTarefas():TJSONArray;
begin
  FRESTRequest.Method := rmGET;
  FRESTRequest.Resource := '/ListTasks';

  FRESTRequest.Execute;

  // Verificação da resposta
  if FRESTResponse.StatusCode = 200 then
  begin
    Result := TJSONObject.ParseJSONValue(FRESTResponse.Content) as TJSONArray;
  end
  else
    ShowMessage('Erro ao listar tarefas: ' + FRESTResponse.Content);

end;

function TTarefasFuncoes.GetPriorityTarefas(): integer;
begin
  FRESTRequest.Method := rmGET;
  FRESTRequest.Resource := '/GetAveragePendingPriority';

  FRESTRequest.Execute;
  Result := 0;
    // Verificação da resposta
  if FRESTResponse.StatusCode = 200 then
  begin
    Result := StrToInt(FRESTResponse.Content);
  end
  else
  begin
    ShowMessage('Erro ao obter o total de tarefas: ' + FRESTResponse.StatusText);
  end;
end;

function TTarefasFuncoes.GetCompletotarefasUtimos7Dias(): string;
begin
  FRESTRequest.Response := FRESTResponse;
  FRESTRequest.Resource := '/GetCompletedTasksLast7Days';
  FRESTRequest.Method := rmGET;

  // Envio da requisição
  FRESTRequest.Execute;

  // Verificação da resposta
  if FRESTResponse.StatusCode = 200 then
    Result :=  FRESTResponse.Content
  else
  begin
    ShowMessage('Erro ao buscar tarefas completadas: ' + FRESTResponse.Content);
  end;
end;

function TTarefasFuncoes.GetTotalTarefas(): integer;
begin
  // Configuração do cliente REST
  Result := 0;
  FRESTRequest.Response := FRESTResponse;
  FRESTRequest.Method := rmGET;
  FRESTRequest.Resource := '/totalTarefas';

  FRESTRequest.Execute;

    // Verificação da resposta
  if FRESTResponse.StatusCode = 200 then
  begin
    Result := StrToInt(FRESTResponse.Content);
  end
  else
  begin
    ShowMessage('Erro ao obter o total de tarefas: ' + FRESTResponse.StatusText);
  end;

end;

function  TTarefasFuncoes.RemoverTarefa(pTaskID: string): boolean;
var
  Confirmation: Integer;

begin
      // Mostrar mensagem de confirmação
  Confirmation := MessageDlg('Deseja deletar a tarefa selecionada?', mtConfirmation, [mbYes, mbNo], 0);
  // Verificar resposta do usuário
  if Confirmation = mrYes then
  begin
    FRESTRequest.Method := rmDELETE;
    FRESTRequest.Resource := '/tasksDel/' + pTaskID;
    // Execução da requisição
    FRESTRequest.Execute;
    // Verificação da resposta
    if FRESTRequest.Response.StatusCode = 200 then
    begin
      Result := True;
      ShowMessage('Tarefa removida com sucesso!');
    end
    else
      ShowMessage('Erro ao remover tarefa: ' + FRESTRequest.Response.Content);
  end;

end;

function TTarefasFuncoes.UpdateStatus(TaskID: string; NewStatus: string): boolean;
begin
  // Configuração do RESTClient e RESTRequest
  //  FRESTClient.BaseURL := 'http://localhost:9000';
    FRESTRequest.Method := TRESTRequestMethod.rmPUT;
    FRESTRequest.Resource := '/UpdateTarefaStatus/' + TaskID + '/status/' + NewStatus;
    // Envio da solicitação
    FRESTRequest.Execute;

  // Verificação da resposta
  if FRESTResponse.StatusCode = 200 then
  begin
    Result := True;
    ShowMessage('Status da tarefa atualizado com sucesso!');
  end
  else
    ShowMessage('Erro ao atualizar status da tarefa: ' + FRESTResponse.Content);
end;

end.

